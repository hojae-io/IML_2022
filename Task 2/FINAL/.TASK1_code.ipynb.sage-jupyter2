{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0b2683","input":"","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"90ff5e","input":"","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"7a624f","input":"# import packages\nfrom statistics import mean\nimport pandas as pd\nimport numpy as np\n\n# import Sklearn packages\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nimport sklearn.metrics as metrics\nfrom sklearn.datasets import load_digits\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Read data\ndf_features = pd.read_csv(\"train_features.csv\")\ndf_labels = pd.read_csv(\"train_labels.csv\")\ndf_test = pd.read_csv(\"test_features.csv\")\n\nfeatures_subtask1 = [\"BaseExcess\" ,\"Fibrinogen\",\"AST\",\"Alkalinephos\",\"Bilirubin_total\",\"Lactate\",\"TroponinI\",\"SaO2\",\"Bilirubin_direct\",\"EtCO2\"]\nlabel_subtask1 = [\"LABEL_BaseExcess\" ,\"LABEL_Fibrinogen\",\"LABEL_AST\",\"LABEL_Alkalinephos\",\"LABEL_Bilirubin_total\",\"LABEL_Lactate\",\"LABEL_TroponinI\",\"LABEL_SaO2\",\"LABEL_Bilirubin_direct\",\"LABEL_EtCO2\"]\n\n# create a vector with only pids\npatientID = df_features[\"pid\"].drop_duplicates()\nnbrpatient = patientID.size\n\npatientIDTest = df_test[\"pid\"].drop_duplicates()\nnbrpatientTest = patientIDTest.size","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"f036e5","input":"# FOR X_TRAIN\n\n# preprocess 1:\n# age range \nBool10 = (df_features[\"Age\"] <= 15) & (df_features[\"Age\"] >= 10)\nBool15 = (df_features[\"Age\"] <= 20) & (df_features[\"Age\"] >= 15)\nBool20 = (df_features[\"Age\"] <= 25) & (df_features[\"Age\"] >= 20)\nBool25 = (df_features[\"Age\"] <= 30) & (df_features[\"Age\"] >= 25)\nBool30 = (df_features[\"Age\"] <= 35) & (df_features[\"Age\"] >= 30)\nBool35 = (df_features[\"Age\"] <= 40) & (df_features[\"Age\"] >= 35)\nBool40 = (df_features[\"Age\"] <= 45) & (df_features[\"Age\"] >= 40)\nBool45 = (df_features[\"Age\"] <= 50) & (df_features[\"Age\"] >= 45)\nBool50 = (df_features[\"Age\"] <= 55) & (df_features[\"Age\"] >= 50)\nBool55 = (df_features[\"Age\"] <= 60) & (df_features[\"Age\"] >= 55)\nBool60 = (df_features[\"Age\"] <= 65) & (df_features[\"Age\"] >= 60)\nBool65 = (df_features[\"Age\"] <= 70) & (df_features[\"Age\"] >= 65)\nBool70 = (df_features[\"Age\"] <= 75) & (df_features[\"Age\"] >= 70)\nBool75 = (df_features[\"Age\"] <= 80) & (df_features[\"Age\"] >= 75)\nBool80 = (df_features[\"Age\"] <= 85) & (df_features[\"Age\"] >= 80)\nBool85 = (df_features[\"Age\"] <= 90) & (df_features[\"Age\"] >= 85)\nBool90 = (df_features[\"Age\"] <= 95) & (df_features[\"Age\"] >= 90)\nBool95 = (df_features[\"Age\"] <= 101) & (df_features[\"Age\"] >= 95)\n\nA = df_features[Bool10]\ndf_features[Bool10] = A.fillna(df_features[Bool10].median()) \nA = df_features[Bool20]\ndf_features[Bool20] = A.fillna(df_features[Bool20].median()) \nA = df_features[Bool30]\ndf_features[Bool30] = A.fillna(df_features[Bool30].median()) \nA = df_features[Bool40]\ndf_features[Bool40] = A.fillna(df_features[Bool40].median()) \nA = df_features[Bool50]\ndf_features[Bool50] = A.fillna(df_features[Bool50].median()) \nA = df_features[Bool60]\ndf_features[Bool60] = A.fillna(df_features[Bool60].median()) \nA = df_features[Bool70]\ndf_features[Bool70] = A.fillna(df_features[Bool70].median()) \nA = df_features[Bool80]\ndf_features[Bool80] = A.fillna(df_features[Bool80].median()) \nA = df_features[Bool90]\ndf_features[Bool90] = A.fillna(df_features[Bool90].median()) \nA = df_features[Bool15]\ndf_features[Bool15] = A.fillna(df_features[Bool15].median()) \nA = df_features[Bool25]\ndf_features[Bool25] = A.fillna(df_features[Bool25].median()) \nA = df_features[Bool35]\ndf_features[Bool35] = A.fillna(df_features[Bool35].median()) \nA = df_features[Bool45]\ndf_features[Bool45] = A.fillna(df_features[Bool45].median())\nA = df_features[Bool55]\ndf_features[Bool55] = A.fillna(df_features[Bool55].median()) \nA = df_features[Bool65]\ndf_features[Bool65] = A.fillna(df_features[Bool65].median()) \nA = df_features[Bool75]\ndf_features[Bool75] = A.fillna(df_features[Bool75].median()) \nA = df_features[Bool85]\ndf_features[Bool85] = A.fillna(df_features[Bool85].median()) \nA = df_features[Bool95]\ndf_features[Bool95] = A.fillna(df_features[Bool95].median()) \n\n# preprocess 2:\n# if there is still NaN nbr (actually we have them in HCO3)\n# replace NaN by the mean value of the whole column\ndf_features.fillna(df_features.mean(), inplace=True)","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"c8c270","input":"# FOR X_TEST\n\n# preprocess 1:\n# age range \nBool10 = (df_test[\"Age\"] <= 15) & (df_test[\"Age\"] >= 10)\nBool15 = (df_test[\"Age\"] <= 20) & (df_test[\"Age\"] >= 15)\nBool20 = (df_test[\"Age\"] <= 25) & (df_test[\"Age\"] >= 20)\nBool25 = (df_test[\"Age\"] <= 30) & (df_test[\"Age\"] >= 25)\nBool30 = (df_test[\"Age\"] <= 35) & (df_test[\"Age\"] >= 30)\nBool35 = (df_test[\"Age\"] <= 40) & (df_test[\"Age\"] >= 35)\nBool40 = (df_test[\"Age\"] <= 45) & (df_test[\"Age\"] >= 40)\nBool45 = (df_test[\"Age\"] <= 50) & (df_test[\"Age\"] >= 45)\nBool50 = (df_test[\"Age\"] <= 55) & (df_test[\"Age\"] >= 50)\nBool55 = (df_test[\"Age\"] <= 60) & (df_test[\"Age\"] >= 55)\nBool60 = (df_test[\"Age\"] <= 65) & (df_test[\"Age\"] >= 60)\nBool65 = (df_test[\"Age\"] <= 70) & (df_test[\"Age\"] >= 65)\nBool70 = (df_test[\"Age\"] <= 75) & (df_test[\"Age\"] >= 70)\nBool75 = (df_test[\"Age\"] <= 80) & (df_test[\"Age\"] >= 75)\nBool80 = (df_test[\"Age\"] <= 85) & (df_test[\"Age\"] >= 80)\nBool85 = (df_test[\"Age\"] <= 90) & (df_test[\"Age\"] >= 85)\nBool90 = (df_test[\"Age\"] <= 95) & (df_test[\"Age\"] >= 90)\nBool95 = (df_test[\"Age\"] <= 101) & (df_test[\"Age\"] >= 95)\n\nA = df_test[Bool10]\ndf_test[Bool10] = A.fillna(df_test[Bool10].median()) \nA = df_test[Bool20]\ndf_test[Bool20] = A.fillna(df_test[Bool20].median()) \nA = df_test[Bool30]\ndf_test[Bool30] = A.fillna(df_test[Bool30].median()) \nA = df_test[Bool40]\ndf_test[Bool40] = A.fillna(df_test[Bool40].median()) \nA = df_test[Bool50]\ndf_test[Bool50] = A.fillna(df_test[Bool50].median()) \nA = df_test[Bool60]\ndf_test[Bool60] = A.fillna(df_test[Bool60].median()) \nA = df_test[Bool70]\ndf_test[Bool70] = A.fillna(df_test[Bool70].median()) \nA = df_test[Bool80]\ndf_test[Bool80] = A.fillna(df_test[Bool80].median()) \nA = df_test[Bool90]\ndf_test[Bool90] = A.fillna(df_test[Bool90].median()) \nA = df_test[Bool15]\ndf_test[Bool15] = A.fillna(df_test[Bool15].median()) \nA = df_test[Bool25]\ndf_test[Bool25] = A.fillna(df_test[Bool25].median()) \nA = df_test[Bool35]\ndf_test[Bool35] = A.fillna(df_test[Bool35].median()) \nA = df_test[Bool45]\ndf_test[Bool45] = A.fillna(df_test[Bool45].median())\nA = df_test[Bool55]\ndf_test[Bool55] = A.fillna(df_test[Bool55].median()) \nA = df_test[Bool65]\ndf_test[Bool65] = A.fillna(df_test[Bool65].median()) \nA = df_test[Bool75]\ndf_test[Bool75] = A.fillna(df_test[Bool75].median()) \nA = df_test[Bool85]\ndf_test[Bool85] = A.fillna(df_test[Bool85].median()) \nA = df_test[Bool95]\ndf_test[Bool95] = A.fillna(df_test[Bool95].median()) \n\n# preprocess 2:\ndf_test.fillna(df_test.mean(), inplace=True) ","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"57f55c","input":"Results1 = pd.DataFrame()\nResults1[\"pid\"] = patientIDTest\nfor i in features_subtask1:\n    X = df_features[[i]].to_numpy().reshape(nbrpatient,12)\n    X = pd.DataFrame(X, columns = ['Hour 1','Hour 2','Hour 3','Hour 4','Hour 5','Hour 6','Hour 7','Hour 8','Hour 9','Hour 10','Hour 11','Hour 12'])\n    X_test = df_test[[i]].to_numpy().reshape(nbrpatientTest,12)\n    X_test = pd.DataFrame(X_test, columns = ['Hour 1','Hour 2','Hour 3','Hour 4','Hour 5','Hour 6','Hour 7','Hour 8','Hour 9','Hour 10','Hour 11','Hour 12'])\n        \n    # adding the standard deviation as another feature\n    X[\"std Dev\"] = X.std(axis=1)\n    X_test[\"std Dev\"] = X_test.std(axis=1)\n    # adding the age feature\n    AgeFeature_array = df_features[[\"Age\"]].to_numpy().reshape(nbrpatient,12)\n    AgeFeature = pd.DataFrame(AgeFeature_array[:,0])\n    X[\"age\"] = AgeFeature\n    AgeFeatureTest_array = df_test[[\"Age\"]].to_numpy().reshape(nbrpatientTest,12)  # we do the same transformation to the \n    AgeFeatureTest = pd.DataFrame(AgeFeature_array[:,0])                           # X_test matrix because it will be fed\n    X_test[\"age\"] = AgeFeatureTest                                                 # to the same classifier\n    \n    B = df_features[[\"Temp\"]].to_numpy().reshape(nbrpatient,12)  # adding only min and max of temperature as new feature\n    X[\"Temp\"] = pd.DataFrame(B.min(axis=1))\n    X[\"Temp\"] = pd.DataFrame(B.max(axis=1))\n    C = df_test[[\"Temp\"]].to_numpy().reshape(nbrpatientTest,12)\n    X_test[\"Temp\"] = pd.DataFrame(C.min(axis=1))\n    X_test[\"Temp\"] = pd.DataFrame(C.max(axis=1))\n    \n    B = df_features[[\"RRate\"]].to_numpy().reshape(nbrpatient,12)  # same for RRate, Glucose, and Chloride\n    X[\"RRate\"] = pd.DataFrame(B.min(axis=1))\n    X[\"RRate\"] = pd.DataFrame(B.max(axis=1))\n    C = df_test[[\"RRate\"]].to_numpy().reshape(nbrpatientTest,12)\n    X_test[\"RRate\"] = pd.DataFrame(C.min(axis=1))\n    X_test[\"RRate\"] = pd.DataFrame(C.max(axis=1))\n    \n    B = df_features[[\"Glucose\"]].to_numpy().reshape(nbrpatient,12)\n    X[\"Glucose\"] = pd.DataFrame(B.min(axis=1))\n    X[\"Glucose\"] = pd.DataFrame(B.max(axis=1))\n    C = df_test[[\"Glucose\"]].to_numpy().reshape(nbrpatientTest,12)\n    X_test[\"Glucose\"] = pd.DataFrame(C.min(axis=1))\n    X_test[\"Glucose\"] = pd.DataFrame(C.max(axis=1))\n    \n    B = df_features[[\"Chloride\"]].to_numpy().reshape(nbrpatient,12)\n    X[\"Chloride\"] = pd.DataFrame(B.min(axis=1))\n    X[\"Chloride\"] = pd.DataFrame(B.max(axis=1))\n    C = df_test[[\"Chloride\"]].to_numpy().reshape(nbrpatientTest,12)\n    X_test[\"Chloride\"] = pd.DataFrame(C.min(axis=1))\n    X_test[\"Chloride\"] = pd.DataFrame(C.max(axis=1))\n    \n    scaler = MinMaxScaler(feature_range=(-1,1)).fit(X)   # thanks to the advice of a friend, we get a better model when \n    X = scaler.transform(X)                              # rescalling the feature's value between -1 and 1\n    scaler = MinMaxScaler(feature_range=(-1,1)).fit(X_test)\n    X_test = scaler.transform(X_test)\n    \n    Y = df_labels[\"LABEL_\"+i]\n\n    model1 = GradientBoostingClassifier()          # Before I used SVC but it was going slower and return a less accurate model\n    model1.fit(X,Y)\n    \n    Y_predicted = model1.decision_function(X_test)\n    Y_predicted = 1/(1 + np.exp(-Y_predicted))     # getting the final value (between 0 and 1 thanks to the sigmoid function)\n    Results1[\"LABEL_\"+i] = Y_predicted             # storing the results for subtask 1\n\ncompression_opts = dict(method='zip', archive_name='prediction.csv') # finally saving and compressing the predicted results\nResults1.to_csv('prediction.zip', index=False, float_format='%.3f',compression=compression_opts) ","pos":3,"type":"cell"}
{"id":0,"time":1619164519068,"type":"user"}
{"last_load":1619167203848,"type":"file"}